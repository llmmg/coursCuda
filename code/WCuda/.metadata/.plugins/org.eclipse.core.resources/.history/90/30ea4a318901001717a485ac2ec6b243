#pragma once

#include <math.h>
#include "MathTools.h"

#include "Calibreur_CPU.h"
#include "ColorTools_CPU.h"
using namespace cpu;

/*----------------------------------------------------------------------*\
 |*			Declaration 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

class MandelbrotMath
    {

	/*--------------------------------------*\
	|*		Constructor		*|
	 \*-------------------------------------*/

    public:

	MandelbrotMath(uint n) :
		calibreur(Interval<float>(0, n), Interval<float>(0, 1))
	    {
	    this->n = n;
	    }

	// constructeur copie automatique car pas pointeur dans
	//	MandelbrotMath
	// 	calibreur
	// 	IntervalF

	virtual ~MandelbrotMath()
	    {
	    // rien
	    }

	/*--------------------------------------*\
	|*		Methodes		*|
	 \*-------------------------------------*/

    public:

	void colorXY(uchar4* ptrColor, float x, float y, float t)
	    {
	    int z = f(x, y, t);

	    calibreur.calibrer(&z);
	    //uchar z=128;
	    float hue01 = z;

	    ColorTools::HSB_TO_RVB(hue01, ptrColor); // update color

	    ptrColor->w = 255; // opaque
	    }

    private:

	int f(float x, float y, float t)
	    {
	    //return sin(x * n + t) * cos(y * n + t);
	    float a,b, aCopy;
	    float z = 0;
	while(z<= n && ((a*a)+(b*b))<=4)
	    {
		aCopy=a;
		a=(a*a-b*b)+x;
		b=2*aCopy*b+y;
		z++;
	    }
	return z;

	}

    /*--------------------------------------*\
	|*		Attributs		*|
     \*-------------------------------------*/

private:

    // Input
    uint n;

    // Tools
    Calibreur<float> calibreur;

};

/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/
